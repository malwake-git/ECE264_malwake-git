==11448== Memcheck, a memory error detector
==11448== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==11448== Using Valgrind-3.16.1-36d6727e1d-20200622X and LibVEX; rerun with -h for copyright info
==11448== Command: ./hw18 inputs/input1 output1
==11448== Parent PID: 11447
==11448== 
--11448-- 
--11448-- Valgrind options:
--11448--    --tool=memcheck
--11448--    --verbose
--11448--    --log-file=memcheck.txt
--11448--    --leak-check=full
--11448-- Contents of /proc/version:
--11448--   Linux version 5.7.0-kali1-amd64 (devel@kali.org) (gcc version 9.3.0 (Debian 9.3.0-14), GNU ld (GNU Binutils for Debian) 2.34) #1 SMP Debian 5.7.6-1kali2 (2020-07-01)
--11448-- 
--11448-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-rdtscp-sse3-ssse3-avx
--11448-- Page sizes: currently 4096, max supported 4096
--11448-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--11448-- Reading syms from /home/kali/Desktop/ECE264/2020FallProblems-Lu/HW18Huffman2/hw18
--11448-- Reading syms from /usr/lib/x86_64-linux-gnu/ld-2.31.so
--11448--   Considering /usr/lib/debug/.build-id/1d/7aa1d2a5c941715ad76064ccb4ac38dccf48a2.debug ..
--11448--   .. build-id is valid
--11448-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--11448--   Considering /usr/lib/debug/.build-id/54/299c4aec0e5e5f3d7b8135341351d0e1dbfc64.debug ..
--11448--   .. build-id is valid
--11448--    object doesn't have a dynamic symbol table
--11448-- Scheduler: using generic scheduler lock implementation.
--11448-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==11448== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-11448-by-kali-on-???
==11448== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-11448-by-kali-on-???
==11448== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-11448-by-kali-on-???
==11448== 
==11448== TO CONTROL THIS PROCESS USING vgdb (which you probably
==11448== don't want to do, unless you know exactly what you're doing,
==11448== or are doing some strange experiment):
==11448==   /usr/bin/vgdb --pid=11448 ...command...
==11448== 
==11448== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==11448==   /path/to/gdb ./hw18
==11448== and then give GDB the following command
==11448==   target remote | /usr/bin/vgdb --pid=11448
==11448== --pid is optional if only one valgrind process is running
==11448== 
--11448-- REDIR: 0x401f820 (ld-linux-x86-64.so.2:strlen) redirected to 0x580ca5f2 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--11448-- REDIR: 0x401f600 (ld-linux-x86-64.so.2:index) redirected to 0x580ca60c (vgPlain_amd64_linux_REDIR_FOR_index)
--11448-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--11448--   Considering /usr/lib/debug/.build-id/f2/7641e081d3c37b410d7f31da4e2bf21040f356.debug ..
--11448--   .. build-id is valid
--11448-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--11448--   Considering /usr/lib/debug/.build-id/25/7cdcdf80e04f91ca9e3b185ee3b52995e89946.debug ..
--11448--   .. build-id is valid
==11448== WARNING: new redirection conflicts with existing -- ignoring it
--11448--     old: 0x0401f820 (strlen              ) R-> (0000.0) 0x580ca5f2 vgPlain_amd64_linux_REDIR_FOR_strlen
--11448--     new: 0x0401f820 (strlen              ) R-> (2007.0) 0x0483bda0 strlen
--11448-- REDIR: 0x401c040 (ld-linux-x86-64.so.2:strcmp) redirected to 0x483cc90 (strcmp)
--11448-- REDIR: 0x401fd60 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4840740 (mempcpy)
--11448-- Reading syms from /usr/lib/x86_64-linux-gnu/libc-2.31.so
--11448--   Considering /usr/lib/debug/.build-id/9c/9b4c997fbbff4ea98320bb8c286051f9ed6513.debug ..
--11448--   .. build-id is valid
--11448-- REDIR: 0x48eae60 (libc.so.6:memmove) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48ea210 (libc.so.6:strncpy) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48eb180 (libc.so.6:strcasecmp) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48e9b30 (libc.so.6:strcat) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48ea270 (libc.so.6:rindex) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48ec510 (libc.so.6:rawmemchr) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x49046d0 (libc.so.6:wmemchr) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x4904270 (libc.so.6:wcscmp) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48eafc0 (libc.so.6:mempcpy) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48eadf0 (libc.so.6:bcmp) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48ea1b0 (libc.so.6:strncmp) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48e9be0 (libc.so.6:strcmp) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48eaf20 (libc.so.6:memset) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x4904230 (libc.so.6:wcschr) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48ea110 (libc.so.6:strnlen) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48e9cb0 (libc.so.6:strcspn) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48eb1d0 (libc.so.6:strncasecmp) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48e9c50 (libc.so.6:strcpy) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48eb320 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x49058d0 (libc.so.6:wcsnlen) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x49042b0 (libc.so.6:wcscpy) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48ea2b0 (libc.so.6:strpbrk) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48e9b90 (libc.so.6:index) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48ea0d0 (libc.so.6:strlen) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48f0870 (libc.so.6:memrchr) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48eb220 (libc.so.6:strcasecmp_l) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48eadb0 (libc.so.6:memchr) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x4904350 (libc.so.6:wcslen) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48ea550 (libc.so.6:strspn) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48eb120 (libc.so.6:stpncpy) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48eb0c0 (libc.so.6:stpcpy) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48ec550 (libc.so.6:strchrnul) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48eb270 (libc.so.6:strncasecmp_l) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--11448-- REDIR: 0x48f94f0 (libc.so.6:__strrchr_sse2) redirected to 0x483b7f0 (__strrchr_sse2)
--11448-- REDIR: 0x48e60b0 (libc.so.6:malloc) redirected to 0x4838710 (malloc)
--11448-- REDIR: 0x48e66e0 (libc.so.6:free) redirected to 0x4839940 (free)
--11448-- REDIR: 0x48ea9f0 (libc.so.6:__GI_strstr) redirected to 0x4840990 (__strstr_sse2)
==11448== Invalid read of size 4
==11448==    at 0x48D9439: rewind (rewind.c:34)
==11448==    by 0x10982A: _ascii_occurances (huffman.c:178)
==11448==    by 0x1094C7: _occurances_file (huffman.c:96)
==11448==    by 0x109EC7: main (main.c:15)
==11448==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==11448== 
==11448== 
==11448== Process terminating with default action of signal 11 (SIGSEGV)
==11448==  Access not within mapped region at address 0x0
==11448==    at 0x48D9439: rewind (rewind.c:34)
==11448==    by 0x10982A: _ascii_occurances (huffman.c:178)
==11448==    by 0x1094C7: _occurances_file (huffman.c:96)
==11448==    by 0x109EC7: main (main.c:15)
==11448==  If you believe this happened as a result of a stack
==11448==  overflow in your program's main thread (unlikely but
==11448==  possible), you can try to increase the size of the
==11448==  main thread stack using the --main-stacksize= flag.
==11448==  The main thread stack size used in this run was 8388608.
==11448== 
==11448== HEAP SUMMARY:
==11448==     in use at exit: 472 bytes in 1 blocks
==11448==   total heap usage: 2 allocs, 1 frees, 944 bytes allocated
==11448== 
==11448== Searching for pointers to 1 not-freed blocks
==11448== Checked 74,432 bytes
==11448== 
==11448== LEAK SUMMARY:
==11448==    definitely lost: 0 bytes in 0 blocks
==11448==    indirectly lost: 0 bytes in 0 blocks
==11448==      possibly lost: 0 bytes in 0 blocks
==11448==    still reachable: 472 bytes in 1 blocks
==11448==         suppressed: 0 bytes in 0 blocks
==11448== Reachable blocks (those to which a pointer was found) are not shown.
==11448== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==11448== 
==11448== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
==11448== 
==11448== 1 errors in context 1 of 1:
==11448== Invalid read of size 4
==11448==    at 0x48D9439: rewind (rewind.c:34)
==11448==    by 0x10982A: _ascii_occurances (huffman.c:178)
==11448==    by 0x1094C7: _occurances_file (huffman.c:96)
==11448==    by 0x109EC7: main (main.c:15)
==11448==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==11448== 
==11448== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
